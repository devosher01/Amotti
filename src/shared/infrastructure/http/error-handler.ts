// shared/infrastructure/http/error-handler.ts
import { IErrorHandler } from './interfaces';
import { ApiError } from './types';

// üéØ Single Responsibility: Solo maneja errores HTTP
export class HttpErrorHandler implements IErrorHandler {
  handle(error: ApiError): void {
    console.error('üö® HTTP Error:', {
      status: error.status,
      message: error.message,
      code: error.code,
      details: error.details,
      timestamp: new Date().toISOString(),
    });

    // ‚úÖ Manejar errores espec√≠ficos
    switch (error.status) {
      case 401:
        this.handleUnauthorized(error);
        break;
      case 403:
        this.handleForbidden(error);
        break;
      case 404:
        this.handleNotFound(error);
        break;
      case 409:
        this.handleConflict(error);
        break;
      case 422:
        this.handleValidationError(error);
        break;
      case 429:
        this.handleRateLimit(error);
        break;
      case 500:
      case 502:
      case 503:
      case 504:
        this.handleServerError(error);
        break;
      default:
        this.handleGenericError(error);
    }
  }

  isRetryable(error: ApiError): boolean {
    // ‚úÖ C√≥digos de error que permiten retry
    const retryableStatuses = [
      408, // Request Timeout
      429, // Too Many Requests
      500, // Internal Server Error
      502, // Bad Gateway
      503, // Service Unavailable
      504, // Gateway Timeout
    ];
    
    return retryableStatuses.includes(error.status);
  }

  private handleUnauthorized(error: ApiError): void {
    console.warn('üîí Unauthorized access - token inv√°lido o expirado');
    
    // ‚úÖ Solo redirigir si estamos en el cliente y no es un endpoint de auth
    if (typeof window !== 'undefined') {
      const currentPath = window.location.pathname;
      
      // No redirigir si ya estamos en login o es un endpoint de auth
      if (!currentPath.includes('/login') && !currentPath.includes('/auth')) {
        console.log('üîÑ Redirecting to login...');
        
        // Guardar la URL actual para redirigir despu√©s del login
        sessionStorage.setItem('redirectAfterLogin', window.location.href);
        
        // Redirigir al login
        window.location.href = '/login';
      }
    }
  }

  private handleForbidden(error: ApiError): void {
    console.warn('üö´ Forbidden access - permisos insuficientes');
    
    // Aqu√≠ podr√≠as mostrar un toast o modal
    if (typeof window !== 'undefined') {
      // TODO: Integrar con tu sistema de notificaciones
      console.warn('Usuario sin permisos para esta acci√≥n');
    }
  }

  private handleNotFound(error: ApiError): void {
    console.warn('üîç Resource not found:', error.message);
    
    // Para endpoints espec√≠ficos, podr√≠as manejar de forma diferente
    if (error.details && typeof error.details === 'object') {
      const details = error.details as any;
      if (details.url?.includes('/publications/')) {
        console.warn('Publicaci√≥n no encontrada');
      }
    }
  }

  private handleConflict(error: ApiError): void {
    console.warn('‚ö†Ô∏è Conflict - recurso ya existe o est√° en conflicto');
    
    // Com√∫n en operaciones de creaci√≥n cuando ya existe el recurso
    if (typeof window !== 'undefined') {
      console.warn('Conflicto detectado:', error.message);
    }
  }

  private handleValidationError(error: ApiError): void {
    console.warn('üìù Validation error - datos inv√°lidos');
    
    // Aqu√≠ podr√≠as parsear los errores de validaci√≥n espec√≠ficos
    if (error.details && typeof error.details === 'object') {
      const details = error.details as any;
      if (details.validationErrors) {
        console.warn('Errores de validaci√≥n:', details.validationErrors);
      }
    }
  }

  private handleRateLimit(error: ApiError): void {
    console.warn('‚è∞ Rate limit exceeded - demasiadas peticiones');
    
    // Extraer informaci√≥n del rate limit si est√° disponible
    if (error.details && typeof error.details === 'object') {
      const details = error.details as any;
      const retryAfter = details.retryAfter || details['retry-after'];
      
      if (retryAfter) {
        console.warn(`Rate limit activo. Retry despu√©s de: ${retryAfter} segundos`);
      }
    }
  }

  private handleServerError(error: ApiError): void {
    console.error('üî• Server error - problema en el backend');
    
    // Log adicional para errores de servidor
    console.error('Detalles del error de servidor:', {
      status: error.status,
      message: error.message,
      details: error.details,
    });
    
    if (typeof window !== 'undefined') {
      // TODO: Mostrar mensaje al usuario sobre error del servidor
      console.error('Error del servidor. Por favor, intenta m√°s tarde.');
    }
  }

  private handleGenericError(error: ApiError): void {
    console.error('‚ö†Ô∏è Generic error:', error.message);
    
    // Para errores de red u otros tipos
    if (error.status === 0) {
      console.error('Error de red - sin conexi√≥n o CORS');
      
      if (typeof window !== 'undefined') {
        console.error('Problema de conexi√≥n. Verifica tu internet.');
      }
    }
  }

  // M√©todo para registrar m√©tricas de errores (opcional)
  logErrorMetrics(error: ApiError): void {
    // Aqu√≠ podr√≠as enviar m√©tricas a un servicio de monitoring
    const metrics = {
      errorCode: error.status,
      errorMessage: error.message,
      timestamp: Date.now(),
      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',
      url: typeof window !== 'undefined' ? window.location.href : 'unknown',
    };
    
    console.log('üìä Error metrics:', metrics);
    
    // TODO: Enviar a servicio de analytics/monitoring
    // analytics.track('http_error', metrics);
  }

  // M√©todo para crear errores personalizados
  createCustomError(message: string, status: number, code?: string, details?: unknown): ApiError {
    return {
      message,
      status,
      code,
      details,
    };
  }
}
